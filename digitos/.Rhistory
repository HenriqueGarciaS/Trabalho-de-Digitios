install.packages(c("animation", "e1071", "factoextra", "FNN", "rpart.plot", "tidyverse"))
install.packages(c("animation", "e1071", "factoextra", "FNN", "rpart.plot", "tidyverse"))
library(tidyverse)
library(rpart)
library(rpart.plot)
library(e1071)
library(FNN)
library(factoextra)
library(animation)
#funções
fazKNN <- function(treino,teste,ClasseTreino,classeTeste){
K <- c(1,3,7,9)
ret <- NULL
for(K in K){
porcentagem <- 0
Resultado <- knn(treino,teste,ClasseTreino,K)
for(i in  1:length(Resultado))
if(Resultado[i] == ClasseTeste[i])
porcentagem <- porcentagem + 1
porcentagem <- (porcentagem / length(ClasseTeste))*100
ret <- c(ret,porcentagem)
}
return(ret)
}
fazSVM <- function(treino,teste,ClasseTeste){
classificador <- svm(ident~ ., treino, 'C-classification', 'linear')
porcentagem <- 0
pred = predict(classificador,teste)
for(i in  1:length(pred))
if(pred[i] == ClasseTeste[i])
porcentagem <- porcentagem + 1
porcentagem <- (porcentagem / length(ClasseTeste))*100
return (porcentagem)
}
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- 0
for(i in 1:length(pred))
if(pred[i] == classe[i])
porcentagem <- porcentagem +1
rpart.plot(modelo,type = 3,tweak = 1.8, fallen.leaves = FALSE )
return ((porcentagem/length(classe))*100)
}
clusteriazacao <- function(data,k){
c <- kmeans(data,k)
kmeans.ani(data,3)
}
#montagem do data frame
setwd("C:/Users/17079294/Desktop/Trabalho-de-Digitios/digitos")
data_digitos <- data.frame()
lista_arquivo <- list.files()
identificador <- NULL
for(arquivo in lista_arquivo){
identificador <- c(identificador,as.numeric(unlist(strsplit(arquivo,'_'))[1]))
leitura <- read_lines(arquivo)
leitura <- leitura[-(1:3)]
leitura <- strsplit(leitura,' ')
leitura <- unlist(leitura)
leitura <- as.numeric(leitura)
data_digitos <- matrix(leitura, nrow = nrow(data_digitos)+1, ncol = length(leitura))
}
data_digitos <- as.data.frame(data_digitos)
data_digitos$ident <- identificador
#separação entre teste e treino
smp_size <- floor(0.8*nrow(data_digitos))
train_ind <- sample(seq_len(nrow(data_digitos)), size = smp_size)
treino <- data_digitos[train_ind,]
teste <- data_digitos[-train_ind,]
ClasseTreino <- treino[,4097]
ClasseTeste <- teste[,4097]
#KNN
acuraciaKNN <- fazKNN(treino,teste,ClasseTreino,ClasseTeste)
acuraciaKNN
acuraciaSVM <- fazSVM(treino,teste,ClasseTeste)
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- 0
for(i in 1:length(pred))
if(pred[i] == classe[i])
porcentagem <- porcentagem +1
rpart.plot(modelo,type = 3,tweak = 1.5, fallen.leaves = FALSE )
return ((porcentagem/length(classe))*100)
}
acuraciaSVM
#Arvore de decisão
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
View(modelo)
pred
pred <- predict(modelo,teste)
pred
pred <- predict(modelo,teste,type = "class")
pred
pred[i]
pred[1]
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- 0
for(i in 1:length(pred))
if(pred[i] == classe[i])
porcentagem <- porcentagem +1
return ((porcentagem/length(classe))*100)
}
#Arvore de decisão
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
pred
length(which(pred == ClasseTeste))
length(which(pred == ClasseTeste))/length(ClasseTeste)
length(which(pred == ClasseTeste))/length(ClasseTeste)*100
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- 0
return length(which(pred == ClasseTeste))/length(ClasseTeste)*100
}
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- 0
return (length(which(pred == ClasseTeste))/length(ClasseTeste)*100)
}
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- length(which(pred == ClasseTeste))/length(ClasseTeste)*100
return (porcentagem)
}
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste, type ="class")
porcentagem <- length(which(pred == classe))/length(classe)*100
return (porcentagem)
}
#Arvore de decisão
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
length(which(pred == Classe))/length(Classe)*100
return (porcentagem)
}
#Arvore de decisão
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
length(which(pred == classe))/length(classe)*100
return (porcentagem)
}
#Arvore de decisão
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
fazrpart <- function(treino,teste,classe){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
porcentagem <-length(which(pred == classe))/length(classe)
porcentagem <- porcentagem * 100
return (porcentagem)
}
length(which(pred == ClasseTeste))/length(ClasseTeste)*100
#Arvore de decisão
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
fazrpart(treino,teste,ClasseTeste){
}
fazrpart <- function(treino,teste,ClasseTeste){
}
fazrpart <- function(treino,teste,ClasseTeste){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
porcentagem <- length(which(pred == ClasseTeste))/length(ClasseTeste)*100
}
fazrpart <- function(treino,teste,ClasseTeste){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
porcentagem <- length(which(pred == ClasseTeste))/length(ClasseTeste)*100
return (porcentagem)
}
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
acurariaRPART
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
length(which(pred == ClasseTeste))/length(ClasseTeste)*100
fazrpart <- function(treino,teste,ClasseTeste){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
porcentagem <- (length(which(pred == ClasseTeste))/length(ClasseTeste))*100
return (porcentagem)
}
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
acurariaRPART
length(which(pred == ClasseTeste))/length(ClasseTeste)*100
fazrpart <- function(treino,teste,ClasseTeste){
sfs
fazrpart <- function(treino,teste,ClasseTeste){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
porcentagem <- length(which(pred == ClasseTeste))
porcentagem <- porcentagem/length(ClasseTeste)*100
return (porcentagem)
}
exit
fazrpart <- function(treino,teste,ClasseTeste){
modelo <- rpart(formula = ident~.,treino,method = "class", control = rpart.control(minsplit = 1))
pred <- predict(modelo,teste,type = "class")
porcentagem <- length(which(pred == ClasseTeste))
porcentagem <- porcentagem/length(ClasseTeste)*100
return (porcentagem)
}
acurariaRPART <- fazrpart(treino,treino,ClasseTeste)
